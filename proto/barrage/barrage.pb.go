// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: barrage/barrage.proto

package barrage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 消息类型
type MessageType int32

const (
	MessageType_TYPE_CONN           MessageType = 0
	MessageType_TYPE_CONN_RES       MessageType = 1
	MessageType_TYPE_HEART_BEAT     MessageType = 2
	MessageType_TYPE_HEART_BEAT_RES MessageType = 3
	MessageType_TYPE_TEXT           MessageType = 4
	MessageType_TYPE_BARRAGE        MessageType = 5
	MessageType_TYPE_BROADCAST      MessageType = 6
	MessageType_TYPE_WATCH_VIDEO    MessageType = 7
	MessageType_TYPE_EXIT_VIDEO     MessageType = 8
)

var MessageType_name = map[int32]string{
	0: "TYPE_CONN",
	1: "TYPE_CONN_RES",
	2: "TYPE_HEART_BEAT",
	3: "TYPE_HEART_BEAT_RES",
	4: "TYPE_TEXT",
	5: "TYPE_BARRAGE",
	6: "TYPE_BROADCAST",
	7: "TYPE_WATCH_VIDEO",
	8: "TYPE_EXIT_VIDEO",
}

var MessageType_value = map[string]int32{
	"TYPE_CONN":           0,
	"TYPE_CONN_RES":       1,
	"TYPE_HEART_BEAT":     2,
	"TYPE_HEART_BEAT_RES": 3,
	"TYPE_TEXT":           4,
	"TYPE_BARRAGE":        5,
	"TYPE_BROADCAST":      6,
	"TYPE_WATCH_VIDEO":    7,
	"TYPE_EXIT_VIDEO":     8,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{0}
}

// 错误码
type RetCode int32

const (
	RetCode_CODE_FAIL    RetCode = 0
	RetCode_CODE_SUCCESS RetCode = 1
)

var RetCode_name = map[int32]string{
	0: "CODE_FAIL",
	1: "CODE_SUCCESS",
}

var RetCode_value = map[string]int32{
	"CODE_FAIL":    0,
	"CODE_SUCCESS": 1,
}

func (x RetCode) String() string {
	return proto.EnumName(RetCode_name, int32(x))
}

func (RetCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{1}
}

// 消息体
type Message struct {
	MsgType              MessageType `protobuf:"varint,1,opt,name=msgType,proto3,enum=barrage.MessageType" json:"msgType,omitempty"`
	MsgId                string      `protobuf:"bytes,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Body                 []byte      `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMsgType() MessageType {
	if m != nil {
		return m.MsgType
	}
	return MessageType_TYPE_CONN
}

func (m *Message) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// 连接请求消息
type ReqConnMessage struct {
	AppId                string   `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Sign                 string   `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Secret               string   `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Timestamp            string   `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version              string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqConnMessage) Reset()         { *m = ReqConnMessage{} }
func (m *ReqConnMessage) String() string { return proto.CompactTextString(m) }
func (*ReqConnMessage) ProtoMessage()    {}
func (*ReqConnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{1}
}
func (m *ReqConnMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqConnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqConnMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqConnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqConnMessage.Merge(m, src)
}
func (m *ReqConnMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqConnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqConnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqConnMessage proto.InternalMessageInfo

func (m *ReqConnMessage) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ReqConnMessage) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *ReqConnMessage) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *ReqConnMessage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ReqConnMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// 连接返回消息
type ResConnMessage struct {
	Code                 RetCode  `protobuf:"varint,1,opt,name=code,proto3,enum=barrage.RetCode" json:"code,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Xid                  string   `protobuf:"bytes,3,opt,name=xid,proto3" json:"xid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResConnMessage) Reset()         { *m = ResConnMessage{} }
func (m *ResConnMessage) String() string { return proto.CompactTextString(m) }
func (*ResConnMessage) ProtoMessage()    {}
func (*ResConnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{2}
}
func (m *ResConnMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResConnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResConnMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResConnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResConnMessage.Merge(m, src)
}
func (m *ResConnMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResConnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResConnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResConnMessage proto.InternalMessageInfo

func (m *ResConnMessage) GetCode() RetCode {
	if m != nil {
		return m.Code
	}
	return RetCode_CODE_FAIL
}

func (m *ResConnMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ResConnMessage) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

// 心跳消息
type ReqHeartBeatMessage struct {
	Xid                  string   `protobuf:"bytes,1,opt,name=xid,proto3" json:"xid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqHeartBeatMessage) Reset()         { *m = ReqHeartBeatMessage{} }
func (m *ReqHeartBeatMessage) String() string { return proto.CompactTextString(m) }
func (*ReqHeartBeatMessage) ProtoMessage()    {}
func (*ReqHeartBeatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{3}
}
func (m *ReqHeartBeatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqHeartBeatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqHeartBeatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqHeartBeatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqHeartBeatMessage.Merge(m, src)
}
func (m *ReqHeartBeatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReqHeartBeatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqHeartBeatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqHeartBeatMessage proto.InternalMessageInfo

func (m *ReqHeartBeatMessage) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

// 心跳响应
type ResHeartBeatMessage struct {
	Xid                  string   `protobuf:"bytes,1,opt,name=xid,proto3" json:"xid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResHeartBeatMessage) Reset()         { *m = ResHeartBeatMessage{} }
func (m *ResHeartBeatMessage) String() string { return proto.CompactTextString(m) }
func (*ResHeartBeatMessage) ProtoMessage()    {}
func (*ResHeartBeatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{4}
}
func (m *ResHeartBeatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResHeartBeatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResHeartBeatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResHeartBeatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResHeartBeatMessage.Merge(m, src)
}
func (m *ResHeartBeatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResHeartBeatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResHeartBeatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResHeartBeatMessage proto.InternalMessageInfo

func (m *ResHeartBeatMessage) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

// 弹幕消息
type BarrageMessage struct {
	Barrage              *BarrageInfo `protobuf:"bytes,1,opt,name=barrage,proto3" json:"barrage,omitempty"`
	Xid                  string       `protobuf:"bytes,2,opt,name=xid,proto3" json:"xid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BarrageMessage) Reset()         { *m = BarrageMessage{} }
func (m *BarrageMessage) String() string { return proto.CompactTextString(m) }
func (*BarrageMessage) ProtoMessage()    {}
func (*BarrageMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{5}
}
func (m *BarrageMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BarrageMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BarrageMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BarrageMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BarrageMessage.Merge(m, src)
}
func (m *BarrageMessage) XXX_Size() int {
	return m.Size()
}
func (m *BarrageMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BarrageMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BarrageMessage proto.InternalMessageInfo

func (m *BarrageMessage) GetBarrage() *BarrageInfo {
	if m != nil {
		return m.Barrage
	}
	return nil
}

func (m *BarrageMessage) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

// 弹幕信息
type BarrageInfo struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	VideoId              string   `protobuf:"bytes,3,opt,name=videoId,proto3" json:"videoId,omitempty"`
	CurDuration          int64    `protobuf:"varint,4,opt,name=curDuration,proto3" json:"curDuration,omitempty"`
	SendTime             int64    `protobuf:"varint,5,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BarrageInfo) Reset()         { *m = BarrageInfo{} }
func (m *BarrageInfo) String() string { return proto.CompactTextString(m) }
func (*BarrageInfo) ProtoMessage()    {}
func (*BarrageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{6}
}
func (m *BarrageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BarrageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BarrageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BarrageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BarrageInfo.Merge(m, src)
}
func (m *BarrageInfo) XXX_Size() int {
	return m.Size()
}
func (m *BarrageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BarrageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BarrageInfo proto.InternalMessageInfo

func (m *BarrageInfo) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *BarrageInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *BarrageInfo) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

func (m *BarrageInfo) GetCurDuration() int64 {
	if m != nil {
		return m.CurDuration
	}
	return 0
}

func (m *BarrageInfo) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

// 广播消息
type BroadcastMessage struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Uid                  string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Xid                  string   `protobuf:"bytes,3,opt,name=xid,proto3" json:"xid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastMessage) Reset()         { *m = BroadcastMessage{} }
func (m *BroadcastMessage) String() string { return proto.CompactTextString(m) }
func (*BroadcastMessage) ProtoMessage()    {}
func (*BroadcastMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{7}
}
func (m *BroadcastMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastMessage.Merge(m, src)
}
func (m *BroadcastMessage) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastMessage proto.InternalMessageInfo

func (m *BroadcastMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *BroadcastMessage) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *BroadcastMessage) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

// 观看视频
type ReqWatchVideo struct {
	Xid                  string   `protobuf:"bytes,1,opt,name=xid,proto3" json:"xid,omitempty"`
	VideoId              string   `protobuf:"bytes,2,opt,name=videoId,proto3" json:"videoId,omitempty"`
	Uid                  string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqWatchVideo) Reset()         { *m = ReqWatchVideo{} }
func (m *ReqWatchVideo) String() string { return proto.CompactTextString(m) }
func (*ReqWatchVideo) ProtoMessage()    {}
func (*ReqWatchVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{8}
}
func (m *ReqWatchVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqWatchVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqWatchVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqWatchVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqWatchVideo.Merge(m, src)
}
func (m *ReqWatchVideo) XXX_Size() int {
	return m.Size()
}
func (m *ReqWatchVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqWatchVideo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqWatchVideo proto.InternalMessageInfo

func (m *ReqWatchVideo) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

func (m *ReqWatchVideo) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

func (m *ReqWatchVideo) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// 退出视频
type ReqExitVideo struct {
	Xid                  string   `protobuf:"bytes,1,opt,name=xid,proto3" json:"xid,omitempty"`
	VideoId              string   `protobuf:"bytes,2,opt,name=videoId,proto3" json:"videoId,omitempty"`
	Uid                  string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqExitVideo) Reset()         { *m = ReqExitVideo{} }
func (m *ReqExitVideo) String() string { return proto.CompactTextString(m) }
func (*ReqExitVideo) ProtoMessage()    {}
func (*ReqExitVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aaa3c9bd6d09eab, []int{9}
}
func (m *ReqExitVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqExitVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqExitVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqExitVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqExitVideo.Merge(m, src)
}
func (m *ReqExitVideo) XXX_Size() int {
	return m.Size()
}
func (m *ReqExitVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqExitVideo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqExitVideo proto.InternalMessageInfo

func (m *ReqExitVideo) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

func (m *ReqExitVideo) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

func (m *ReqExitVideo) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterEnum("barrage.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("barrage.RetCode", RetCode_name, RetCode_value)
	proto.RegisterType((*Message)(nil), "barrage.Message")
	proto.RegisterType((*ReqConnMessage)(nil), "barrage.ReqConnMessage")
	proto.RegisterType((*ResConnMessage)(nil), "barrage.ResConnMessage")
	proto.RegisterType((*ReqHeartBeatMessage)(nil), "barrage.ReqHeartBeatMessage")
	proto.RegisterType((*ResHeartBeatMessage)(nil), "barrage.ResHeartBeatMessage")
	proto.RegisterType((*BarrageMessage)(nil), "barrage.BarrageMessage")
	proto.RegisterType((*BarrageInfo)(nil), "barrage.BarrageInfo")
	proto.RegisterType((*BroadcastMessage)(nil), "barrage.BroadcastMessage")
	proto.RegisterType((*ReqWatchVideo)(nil), "barrage.ReqWatchVideo")
	proto.RegisterType((*ReqExitVideo)(nil), "barrage.ReqExitVideo")
}

func init() { proto.RegisterFile("barrage/barrage.proto", fileDescriptor_1aaa3c9bd6d09eab) }

var fileDescriptor_1aaa3c9bd6d09eab = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xe6, 0xa7, 0x69, 0x26, 0x6d, 0x58, 0xb6, 0x01, 0x02, 0x42, 0x51, 0x64, 0x21, 0x51,
	0xf5, 0x50, 0x24, 0x78, 0x02, 0xdb, 0x31, 0xd4, 0x52, 0xdb, 0x54, 0x1b, 0xd3, 0x16, 0x2e, 0x91,
	0x63, 0x2f, 0xc1, 0x87, 0xd8, 0x89, 0x77, 0x83, 0xda, 0x57, 0xe0, 0xc6, 0x8d, 0x97, 0xe1, 0xce,
	0x91, 0x47, 0x40, 0xe5, 0x45, 0xd0, 0x6e, 0x76, 0x1d, 0xd3, 0x48, 0x88, 0x03, 0xa7, 0xec, 0x37,
	0xf3, 0xed, 0x7c, 0xdf, 0xcc, 0x64, 0x0d, 0x0f, 0x26, 0x61, 0x9e, 0x87, 0x53, 0xf6, 0x42, 0xff,
	0x1e, 0xcd, 0xf3, 0x4c, 0x64, 0xa4, 0xa1, 0xa1, 0x15, 0x41, 0xe3, 0x94, 0x71, 0x1e, 0x4e, 0x19,
	0x39, 0x82, 0xc6, 0x8c, 0x4f, 0x83, 0x9b, 0x39, 0xeb, 0xa2, 0x3e, 0x3a, 0x68, 0xbf, 0xec, 0x1c,
	0x99, 0x4b, 0x9a, 0x22, 0x73, 0xd4, 0x90, 0x48, 0x07, 0xea, 0x33, 0x3e, 0xf5, 0xe3, 0x6e, 0xa5,
	0x8f, 0x0e, 0x9a, 0x74, 0x05, 0x08, 0x81, 0xda, 0x24, 0x8b, 0x6f, 0xba, 0xd5, 0x3e, 0x3a, 0xd8,
	0xa5, 0xea, 0x6c, 0x7d, 0x46, 0xd0, 0xa6, 0x6c, 0xe1, 0x66, 0x69, 0x6a, 0xc4, 0x3a, 0x50, 0x0f,
	0xe7, 0x73, 0x3f, 0x56, 0x52, 0x4d, 0xba, 0x02, 0xf2, 0x32, 0x4f, 0xa6, 0xa9, 0xae, 0xa8, 0xce,
	0xe4, 0x21, 0x6c, 0x73, 0x16, 0xe5, 0x4c, 0xa8, 0x92, 0x4d, 0xaa, 0x11, 0x79, 0x0a, 0x4d, 0x91,
	0xcc, 0x18, 0x17, 0xe1, 0x6c, 0xde, 0xad, 0xa9, 0xd4, 0x3a, 0x40, 0xba, 0xd0, 0xf8, 0xc4, 0x72,
	0x9e, 0x64, 0x69, 0xb7, 0xae, 0x72, 0x06, 0x5a, 0x13, 0xe9, 0x85, 0x97, 0xbd, 0x3c, 0x83, 0x5a,
	0x94, 0xc5, 0xa6, 0x6b, 0x5c, 0x74, 0x4d, 0x99, 0x70, 0xb3, 0x98, 0x51, 0x95, 0x95, 0x15, 0xa3,
	0x2c, 0x15, 0x2c, 0x15, 0xda, 0x9e, 0x81, 0x04, 0x43, 0xf5, 0x3a, 0x89, 0xb5, 0x3d, 0x79, 0xb4,
	0x9e, 0xc3, 0x3e, 0x65, 0x8b, 0x63, 0x16, 0xe6, 0xc2, 0x61, 0xa1, 0x30, 0x42, 0x9a, 0x88, 0xee,
	0x10, 0xf9, 0x3f, 0x10, 0x29, 0xb4, 0x9d, 0x95, 0xad, 0xd2, 0xba, 0xb4, 0x51, 0xc5, 0x6b, 0x95,
	0xd6, 0xa5, 0x99, 0x7e, 0xfa, 0x21, 0xa3, 0x86, 0x64, 0x6a, 0x56, 0xd6, 0x35, 0xbf, 0x20, 0x68,
	0x95, 0xa8, 0x92, 0xb1, 0x5c, 0xab, 0x2e, 0x93, 0xf8, 0x2f, 0x3d, 0xcb, 0xf9, 0x26, 0x31, 0xcb,
	0x7c, 0xd3, 0xb7, 0x81, 0xa4, 0x0f, 0xad, 0x68, 0x99, 0x0f, 0x96, 0x79, 0x28, 0xe4, 0xf4, 0xe5,
	0x66, 0xaa, 0xb4, 0x1c, 0x22, 0x4f, 0x60, 0x87, 0xb3, 0x34, 0x0e, 0x92, 0x19, 0x53, 0xcb, 0xa9,
	0xd2, 0x02, 0x5b, 0xe7, 0x80, 0x9d, 0x3c, 0x0b, 0xe3, 0x28, 0xe4, 0xc5, 0x34, 0x4a, 0x2e, 0xd0,
	0xc6, 0xe4, 0x97, 0xeb, 0x9e, 0xa4, 0xe3, 0xcd, 0x5d, 0x9c, 0xc2, 0x1e, 0x65, 0x8b, 0xcb, 0x50,
	0x44, 0x1f, 0x2f, 0xa4, 0xc5, 0xcd, 0xe1, 0x96, 0x9b, 0xa9, 0xfc, 0xd9, 0x8c, 0x16, 0xa8, 0x16,
	0x02, 0xd6, 0x09, 0xec, 0x52, 0xb6, 0xf0, 0xae, 0x13, 0xf1, 0x1f, 0xaa, 0x1d, 0x7e, 0x43, 0xd0,
	0x2a, 0x3d, 0x2e, 0xb2, 0x07, 0xcd, 0xe0, 0xdd, 0xb9, 0x37, 0x76, 0x87, 0x67, 0x67, 0x78, 0x8b,
	0xdc, 0x87, 0xbd, 0x02, 0x8e, 0xa9, 0x37, 0xc2, 0x88, 0xec, 0xc3, 0x3d, 0x15, 0x3a, 0xf6, 0x6c,
	0x1a, 0x8c, 0x1d, 0xcf, 0x0e, 0x70, 0x85, 0x3c, 0x82, 0xfd, 0x3b, 0x41, 0xc5, 0xae, 0x16, 0xf5,
	0x02, 0xef, 0x2a, 0xc0, 0x35, 0x82, 0x61, 0x57, 0x41, 0xc7, 0xa6, 0xd4, 0x7e, 0xe3, 0xe1, 0x3a,
	0x21, 0xd0, 0x5e, 0x45, 0xe8, 0xd0, 0x1e, 0xb8, 0xf6, 0x28, 0xc0, 0xdb, 0xa4, 0x03, 0x58, 0xc5,
	0x2e, 0xed, 0xc0, 0x3d, 0x1e, 0x5f, 0xf8, 0x03, 0x6f, 0x88, 0x1b, 0x85, 0xb0, 0x77, 0xe5, 0x07,
	0x3a, 0xb8, 0x73, 0x78, 0x08, 0x0d, 0xfd, 0x4a, 0xa4, 0x94, 0x3b, 0x1c, 0x78, 0xe3, 0xd7, 0xb6,
	0x7f, 0x82, 0xb7, 0xa4, 0x94, 0x82, 0xa3, 0xb7, 0xae, 0xeb, 0x8d, 0x46, 0x18, 0x39, 0x8f, 0xbf,
	0xdf, 0xf6, 0xd0, 0x8f, 0xdb, 0x1e, 0xfa, 0x79, 0xdb, 0x43, 0x5f, 0x7f, 0xf5, 0xb6, 0xde, 0x9b,
	0xff, 0xe6, 0x64, 0x5b, 0x7d, 0x95, 0x5e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x39, 0x6f, 0x10,
	0x5c, 0xae, 0x04, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgType != 0 {
		i = encodeVarintBarrage(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqConnMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqConnMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqConnMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResConnMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResConnMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResConnMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBarrage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqHeartBeatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqHeartBeatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqHeartBeatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResHeartBeatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResHeartBeatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResHeartBeatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BarrageMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarrageMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BarrageMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Barrage != nil {
		{
			size, err := m.Barrage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBarrage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BarrageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarrageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BarrageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SendTime != 0 {
		i = encodeVarintBarrage(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CurDuration != 0 {
		i = encodeVarintBarrage(dAtA, i, uint64(m.CurDuration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqWatchVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqWatchVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqWatchVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqExitVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqExitVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqExitVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Xid) > 0 {
		i -= len(m.Xid)
		copy(dAtA[i:], m.Xid)
		i = encodeVarintBarrage(dAtA, i, uint64(len(m.Xid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBarrage(dAtA []byte, offset int, v uint64) int {
	offset -= sovBarrage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovBarrage(uint64(m.MsgType))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqConnMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResConnMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBarrage(uint64(m.Code))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqHeartBeatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResHeartBeatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BarrageMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Barrage != nil {
		l = m.Barrage.Size()
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BarrageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.CurDuration != 0 {
		n += 1 + sovBarrage(uint64(m.CurDuration))
	}
	if m.SendTime != 0 {
		n += 1 + sovBarrage(uint64(m.SendTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BroadcastMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqWatchVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqExitVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovBarrage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBarrage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBarrage(x uint64) (n int) {
	return sovBarrage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqConnMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqConnMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqConnMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResConnMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResConnMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResConnMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= RetCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqHeartBeatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqHeartBeatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqHeartBeatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResHeartBeatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResHeartBeatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResHeartBeatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarrageMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarrageMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarrageMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barrage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barrage == nil {
				m.Barrage = &BarrageInfo{}
			}
			if err := m.Barrage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarrageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarrageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarrageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurDuration", wireType)
			}
			m.CurDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqWatchVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqWatchVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqWatchVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqExitVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqExitVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqExitVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBarrage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBarrage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarrage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBarrage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBarrage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBarrage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBarrage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBarrage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBarrage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBarrage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBarrage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBarrage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBarrage = fmt.Errorf("proto: unexpected end of group")
)
